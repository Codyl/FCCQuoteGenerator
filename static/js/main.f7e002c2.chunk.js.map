{"version":3,"sources":["reportWebVitals.js","QuoteMessage.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","CategoryButton","variant","this","props","category","children","toLowerCase","style","margin","React","Component","QuoteMessage","state","categorys","getNewQuote","fetchNewQuote","bind","setCategory","myRef","createRef","newCategory","current","value","setState","setTimeout","settings","async","crossDomain","url","method","headers","process","fetch","response","json","data","console","log","author","text","document","getElementById","classList","remove","offsetWidth","add","catch","err","error","getCategories","defaultProps","onClick","getCategory","catsElems","forEach","cat","push","textAlign","htmlFor","name","id","ref","onChange","className","backgroundColor","borderRadius","padding","position","left","top","target","rel","href","Button","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f7e002c2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"./QuoteMessage.css\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass CategoryButton extends React.Component {\r\n  render() {\r\n    let variant;\r\n    if (this.props.category === this.props.children.toLowerCase()) {\r\n      variant = \"primary\";\r\n    } else {\r\n      variant = \"secondary\";\r\n    }\r\n    return (\r\n      <option style={{ margin: \"3px\" }} variant={variant}>\r\n        {this.props.children}\r\n      </option>\r\n    );\r\n  }\r\n}\r\nCategoryButton.propTypes = {\r\n  category: PropTypes.string,\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nclass QuoteMessage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      category: \"age\",\r\n      categorys: [],\r\n    };\r\n    this.getNewQuote = this.fetchNewQuote.bind(this);\r\n    this.setCategory = this.setCategory.bind(this);\r\n    this.myRef = React.createRef();\r\n  }\r\n  componentDidMount() {\r\n    this.fetchNewQuote();\r\n  }\r\n  setCategory() {\r\n    const newCategory = this.myRef.current.value;\r\n    this.setState({\r\n      category: newCategory,\r\n    });\r\n    setTimeout(() => this.fetchNewQuote(), 100);\r\n  }\r\n  getCategory() {\r\n    return this.state.category;\r\n  }\r\n  fetchNewQuote() {\r\n    const settings = {\r\n      async: true,\r\n      crossDomain: true,\r\n      url: `https://famous-quotes4.p.rapidapi.com/random?category=${this.state.category}&count=1`,\r\n      method: \"GET\",\r\n      headers: {\r\n        \"x-rapidapi-key\": process.env.REACT_APP_quoteAPIKey,\r\n        \"x-rapidapi-host\": \"famous-quotes4.p.rapidapi.com\",\r\n      },\r\n    };\r\n    fetch(settings.url, settings)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(\r\n          data,\r\n          `https://famous-quotes4.p.rapidapi.com/random?category=${this.state.category}&count=1`\r\n        );\r\n        this.setState({ author: data[0].author, text: data[0].text });\r\n      })\r\n      .then(() => {\r\n        document.getElementById(\"quote-box\").classList.remove(\"fadeInText\");\r\n        void document.getElementById(\"quote-box\").offsetWidth; //Do not remove, required for fade to work!\r\n        document.getElementById(\"quote-box\").classList.add(\"fadeInText\");\r\n      });\r\n  }\r\n  getCategories() {\r\n    fetch(\"https://famous-quotes4.p.rapidapi.com/\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"x-rapidapi-host\": \"famous-quotes4.p.rapidapi.com\",\r\n        \"x-rapidapi-key\": process.env.REACT_APP_quoteAPIKey,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        this.setState({ categorys: data });\r\n      })\r\n      .catch((err) => {\r\n        console.error(err);\r\n      });\r\n  }\r\n  componentWillMount() {\r\n    this.getCategories();\r\n  }\r\n  render() {\r\n    CategoryButton.defaultProps = {\r\n      onClick: this.setCategory,\r\n      category: this.getCategory(),\r\n    };\r\n\r\n    let catsElems = [];\r\n    this.state.categorys.forEach((cat) => {\r\n      catsElems.push(\r\n        <CategoryButton value={cat} key={cat}>\r\n          {cat}\r\n        </CategoryButton>\r\n      );\r\n    });\r\n    return (\r\n      <div style={{ textAlign: \"center\" }}>\r\n        <h1>Inspirational Quotes</h1>\r\n        <hr />\r\n        <label htmlFor=\"category\">Choose a category</label>{\" \"}\r\n        <select\r\n          name=\"category\"\r\n          id=\"categorySelect\"\r\n          ref={this.myRef}\r\n          onChange={this.setCategory}>\r\n          {catsElems}\r\n        </select>\r\n        <div\r\n          className=\"fadeInText\"\r\n          id=\"quote-box\"\r\n          style={{\r\n            backgroundColor: \"lightgrey\",\r\n            margin: \"10px 10%\",\r\n            borderRadius: \"5px\",\r\n            padding: \"5px\",\r\n          }}>\r\n          <h2 id=\"author\">{this.state.author}</h2>\r\n          <blockquote id=\"text\">{this.state.text}</blockquote>\r\n        </div>\r\n        <a\r\n          style={{ position: \"absolute\", left: \"41%\", top: 305 }}\r\n          id=\"tweet-quote\"\r\n          target=\"_blank\"\r\n          rel=\"noreferrer\"\r\n          href={`https://twitter.com/intent/tweet?text=${this.state.text}&hashtags=quotes`}>\r\n          Tweet Quote\r\n        </a>\r\n        <Button\r\n          style={{ position: \"absolute\", left: \"50%\", top: 300 }}\r\n          id=\"new-quote\"\r\n          variant=\"success\"\r\n          onClick={() => this.setCategory()}>\r\n          New Quote!\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteMessage;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport QuoteMessage from './QuoteMessage';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuoteMessage/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}